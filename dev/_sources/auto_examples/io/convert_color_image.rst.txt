
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/io/convert_color_image.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_io_convert_color_image.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_io_convert_color_image.py:


Adjust contrast and save RGB images
===================================

This example shows how to adjust the contrast and intensities using
scikit-image and save it as an RGB image.

When saving an RGB image to ``jpg``, only 8 bits are supported and the image
intensity needs to be rescaled to 0-255 before converting to 8 bits,
otherwise, the intensities will be cropped at the value of 255.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python


    import hyperspy.api as hs
    import numpy as np
    import skimage as ski








.. GENERATED FROM PYTHON SOURCE LINES 19-24

Adjust contrast
###############

In hyperspy, color images are defined as Signal1D with the signal dimension
corresponding to the color channel (red, green and blue)

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: Python


    # The dtype can be changed to a custom dtype, which is convenient to visualise
    # the color image
    s = hs.signals.Signal1D(ski.data.astronaut())
    s.change_dtype("rgb8")
    print(s)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <Signal2D, title: , dimensions: (|512, 512)>




.. GENERATED FROM PYTHON SOURCE LINES 33-34

Display the color image

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    s.plot()




.. image-sg:: /auto_examples/io/images/sphx_glr_convert_color_image_001.png
   :alt:  Signal
   :srcset: /auto_examples/io/images/sphx_glr_convert_color_image_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-40

Processing is usually performed on standard dtype (e.g. ``uint8``, ``uint16``), because
most functions from scikit-image, numpy, scipy, etc. only support standard ``dtype``.
Convert from RGB to unsigned integer 16 bits

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: Python

    s.change_dtype("uint8")
    print(s)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/io/images/sphx_glr_convert_color_image_002.png
         :alt: convert color image
         :srcset: /auto_examples/io/images/sphx_glr_convert_color_image_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/io/images/sphx_glr_convert_color_image_003.png
         :alt:  Signal
         :srcset: /auto_examples/io/images/sphx_glr_convert_color_image_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <Signal1D, title: , dimensions: (512, 512|3)>




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Adjust contrast (gamma correction)

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: Python

    s.data = ski.exposure.adjust_gamma(s.data, gamma=0.2)








.. GENERATED FROM PYTHON SOURCE LINES 48-52

Save to ``jpg``
###############

Change dtype back to custom dtype ``rgb8``

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: Python

    s.change_dtype("rgb8")




.. image-sg:: /auto_examples/io/images/sphx_glr_convert_color_image_004.png
   :alt:  Signal
   :srcset: /auto_examples/io/images/sphx_glr_convert_color_image_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-57

Save as jpg

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: Python

    s.save("rgb8_image.jpg", overwrite=True)









.. GENERATED FROM PYTHON SOURCE LINES 61-67

Save ``rgb16`` image to ``jpg``
###############################

The last part of this example shows how to save ``rgb16`` to a ``jpg`` file

Create a signal with ``rgb16`` dtype

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: Python

    s2 = hs.signals.Signal1D(ski.data.astronaut().astype("uint16") * 100)








.. GENERATED FROM PYTHON SOURCE LINES 71-74

To save a color image to ``jpg``, the signal needs to be converted to ``rgb8`` because
``jpg`` only support 8-bit RGB
Rescale intensity to fit the unsigned integer 8 bits (2**8 = 256 intensity level)

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    s2.data = ski.exposure.rescale_intensity(s2.data, out_range=(0, 255))








.. GENERATED FROM PYTHON SOURCE LINES 77-79

Now that the values have been rescaled to the 0-255 range, we can convert the data type
to unsigned integer 8 bit and then ``rgb8`` to be able to save the RGB image in ``jpg`` format

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: Python

    s2.change_dtype("uint8")
    s2.change_dtype("rgb8")
    s2.save("rgb16_image_saved_as_jpg.jpg", overwrite=True)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.118 seconds)


.. _sphx_glr_download_auto_examples_io_convert_color_image.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: convert_color_image.ipynb <convert_color_image.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: convert_color_image.py <convert_color_image.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: convert_color_image.zip <convert_color_image.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
